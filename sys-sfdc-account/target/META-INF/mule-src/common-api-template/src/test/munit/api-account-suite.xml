<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="api-account-suite.xml" />
	<munit:test name="get:\account:api-account-config-test" doc:id="1b92d1f0-88dd-48bf-a5a3-9c3b70255952" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sfdc-query-subflow" doc:id="91595354-0793-4705-8828-fcdedb4a987d" processor="salesforce:query">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="429dfb25-df3c-4e5d-ace7-ca041a70fb6e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://getaccountapiaccountconfigtest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getaccountapiaccountconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="queryObject" value="#[output application/json --- readUrl('classpath://getaccountapiaccountconfigtest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="modifiedDate" value="#[output application/java --- readUrl('classpath://getaccountapiaccountconfigtest\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="59909e0c-0648-4c02-b2b7-743d702b32d4" >
				<munit:payload value="#[readUrl('classpath://getaccountapiaccountconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getaccountapiaccountconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getaccountapiaccountconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\account:api-account-config" doc:id="85954704-0c87-4764-a5c0-7f28d42c62a8" name="get:\account:api-account-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ba568911-3ad2-40a7-a595-ffddc58b0fa3" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getaccountapiaccountconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:assert doc:name="Assert variables" doc:id="e7086964-eb5a-4eb4-bfc5-6f88ac96a519" message="The variables do not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getaccountapiaccountconfigtest::assert_expression_variables
---
assert_expression_variables::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\user:api-account-config-test" doc:id="79635c4d-3e40-4b0c-a3a2-07ba9d5c16d4" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sfdc-user-subflow" doc:id="517924d4-2a34-49f8-beda-053cf9843abf" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="ccedf753-97c3-4a40-89f6-9c1e5dc2acb5" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://getuserapiaccountconfigtest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getuserapiaccountconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="queryObject" value="#[output application/java --- readUrl('classpath://getuserapiaccountconfigtest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="userName" value="#[output application/java --- readUrl('classpath://getuserapiaccountconfigtest\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="cb6cd52b-910b-4c81-a3a3-9b316d0a8c83" >
				<munit:payload value="#[readUrl('classpath://getuserapiaccountconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getuserapiaccountconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getuserapiaccountconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\user:api-account-config" doc:id="3fec5f45-f10a-4548-8abd-8b431204e482" name="get:\user:api-account-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c591e79a-a2a4-43de-9231-7295453bb919" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getuserapiaccountconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:assert doc:name="Assert variables" doc:id="bad92dc7-054c-41ba-84ec-a7fb4c7308f5" message="The variables do not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getuserapiaccountconfigtest::assert_expression_variables
---
assert_expression_variables::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="patch:\account:application\json:api-account-config-test" doc:id="7a5870da-5749-4a1b-8de1-c47aec71f6cc" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sfdc-patch-subflow" doc:id="ba5e102e-be1b-496b-9ef3-5dd10a0a6702" processor="salesforce:upsert">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="f157c796-edb9-4f36-a855-4eb738c15832" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://patchaccountapplicationjsonapiaccountconfigtest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://patchaccountapplicationjsonapiaccountconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="f2f28a42-dde9-484a-b8dc-519b88a6ab82" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://patchaccountapplicationjsonapiaccountconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://patchaccountapplicationjsonapiaccountconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://patchaccountapplicationjsonapiaccountconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to patch:\account:application\json:api-account-config" doc:id="e411da99-cccf-46dc-b907-a767e4c9783a" name="patch:\account:application\json:api-account-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ee60c634-c160-4429-ae34-ca1d7242fe91" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import patchaccountapplicationjsonapiaccountconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
